FORMAT: 1A
HOST: https://ultra.uniclogs.psas.pdx.edu/

# ULTRA

UniClOGS Live Telemetry and Request API

## Version [/version]

This endpoint is for fetching the API's active version.

### Get the active API version [GET]

+ Response 200 (application/json)

        {
            'version': (string),
            'website': 'https://github.com/oresat/uniclogs-software',
            'license': 'GPLv3',
            'author': 'Portland State Aerospace Society'
        }

## Request [/requests]

This endpoint is for creating and managing OreSat Live requests.

### List All Requests [GET]

+ Request
    + Headers

            Authorization: Token (string, required)

+ Response 200 (application/json)

        [
            {
                "request_id": (string),
                "is_approved": (string),
                "is_sent": (string),
                "pass_data": {
                    "latitude": (float),
                    "longitude": (float),
                    "elevation_m": (int),
                    "horizon_deg": (float),
                    "aos_utc": (string),
                    "los_utc": (string)
                },
                "created_date": (string),
                "updated_date": (string),
                "observation_type": (string)
            }
        ]

+ Request

        {
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "Authentication is required via the 'Authorization' header with your unique ULTRA token."


### Create A Request [POST]

+ Request
    + Headers

            Authorization: Token (string, required)

    + Body

            {
                "latitude": (float, required),
                "longitude": (float, required),
                "elevation_m": (float, optional),
                "aos_utc": (float, required),
                "los_utc": (float, required)
            }

+ Response 201 (application/json)

        {
            "message": "request created"
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "The token specified is not valid."


+ Response 406 (application/json)
    + Headers

            Accept: "Invalid data entry. latitude must be a valid float, longitude must be a valid float, elevation_m must be a valid float, aos_utc must be a valid datetime string in UTC time, and los_utc must be a valid datetime string in UTC time."


+ Request

        {
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "Authentication is required via the 'Authorization' header with your unique ULTRA token."

### List A Single Request [GET /requests/{request_id}]

+ Parameters
    + request_id (string, required) - The Request ID to get

+ Request (application/json)
    + Headers

            Authorization: Token (string, required)

+ Response 200 (application/json)

        {
            "request_id": (string),
            "is_approved": (string),
            "is_sent": (string),
            "pass_data": {
                "latitude": (float),
                "longitude": (float),
                "elevation_m": (int),
                "horizon_deg": (float),
                "aos_utc": (string),
                "los_utc": (string)
            },
            "created_date": (string),
            "updated_date": (string),
            "observation_type": (string)
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "The token specified is not valid."

+ Response 404 (application/json)
    + Headers

            Accept: 'The request id provided does not exist. Request the `/requests` endpoint for a list of all your requests.'

+ Request

        {
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "Authentication is required via the 'Authorization' header with your unique ULTRA token."

### Replace A Single Request [PATCH /requests/{request_id}]

+ Parameters
    + request_id (string, required) - The Request ID to patch

+ Request (application/json)
    + Headers

            Authorization: Token (string, required)

    + Body

            {
                "latitude": (float, required),
                "longitude": (float, required),
                "elevation_m": (float, optional),
                "aos_utc": (float, required),
                "los_utc": (float, required)
            }

+ Response 202 (application/json)

        {
            "message": "request updated"
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "The token specified is not valid."

+ Response 404 (application/json)
    + Headers

            Accept: 'The request id provided does not exist. Request the `/requests` endpoint for a list of all your requests.'

+ Response 406 (application/json)
    + Headers

            Accept: "Invalid data entry. latitude must be a valid float, longitude must be a valid float, elevation_m must be a valid float, aos_utc must be a valid datetime string in UTC time, and los_utc must be a valid datetime string in UTC time."


+ Request

        {
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "Authentication is required via the 'Authorization' header with your unique ULTRA token."

### Delete A Single Request [DELETE /requests/{request_id}]

+ Parameters
    + request_id (string, required) - The Request ID to delete

+ Request (application/json)
    + Headers

            Authorization: Token (string, required)

+ Response 202 (application/json)

        {
            "message": "request deleted"
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "The token specified is not valid."

+ Response 404 (application/json)
    + Headers

            Accept: 'The request id provided does not exist. Request the `/requests` endpoint for a list of all your requests.'

+ Request

        {
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "Authentication is required via the 'Authorization' header with your unique ULTRA token."

## Passes [/passes]

This endpoint is for retrieving an active list of unreserved valid passes of OreSat over a given location.

### Get All Available Passes [GET]

+ Response 200 (application/json)

        [
            {
                "latitude": (float),
                "longitude": (float),
                "elevation_m": (int),
                "horizon_deg": (float),
                "aos_utc": (string),
                "los_utc": (string)
            }
        ]

## Signal [/signal]

This endpoint is an internal endpoint that only accepts requests from `0.0.0.0:80` (localhost) and is an internal tool for signaling to ULTRA from another service/program that something other than ULTRA has either updated or removed a request.

### Post A Signal [POST]

+ Request (application/json)
    + Headers

            Authorization: Token (string, required)

    + Body

            {
                [
                    "request_id": (string)
                ]
            }

+ Response 200 (application/json)

        {
            "message": "signal received"
        }

## User [/user]

This endpoint is for creating, managing, and deleting users.

### Get A User [GET]

+ Request (application/json)
    + Headers

            Authorization: Token (string, required)

+ Response 200 (application/json)

        {
            "token": (string),
            "username": (string)
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "The token specified is not valid."

+ Request

        {
        }

+ Response 401 (application/json)
    + Headers

            WWW-Authenticate: "Authentication is required via the 'Authorization' header with your unique ULTRA token."


### Create A New User [POST]

+ Request (application/json)

    + Body

            {
                "username": (string, required)
            }

+ Response 201 (application/json)

        {
            "message": "user created",
            "token": (string),
            "username": (string)
        }

+ Response 406 (application/json)
    + Headers

            Accept: "Invalid username. username must follow pattern: [a-zA-Z][a-zA-Z0-9_\-]+"

## Telemetry [/telemetry]

This endpoint is for receiving the latest telemetry from OreSat.

### Get The Latest Telemetry [GET]

+ Request (application/json)
    + Headers

            Authorization: Token (string, required)

+ Response 200 (application/json)

        [
            {
                "id": (int),
                "received_at": (string),
                "invalid_count": (int),
                "sensor_used": (int),
                "vector_body_1": (int),
                "vector_body_2": (int),
                "vector_body_3": (int),
                "vector_valid": (bool)
            }
        ]
